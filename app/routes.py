import logging
from fastapi import APIRouter
from pydantic import BaseModel, Field
from app.chat_service import ChatService

# Set up logging
logger = logging.getLogger(__name__)

# Initialize router
router = APIRouter(
    prefix="/chat",
    tags=["Chatbot"]
)

# Initialize chatbot logic
chat_service = ChatService()

# Request schema
class QueryRequest(BaseModel):
    question: str = Field(
        ...,
        title="User Question",
        description="Ask any question related to the uploaded documents (e.g., policies, finance, governance).",
        example="What is the profit after tax for 2024?"
    )
    thread_id: str = Field(
        None,
        title="Conversation Thread ID",
        description="A unique identifier for the conversation. Leave blank if it's the first message in a new conversation."
    )

# Response schema
class QueryResponse(BaseModel):
    answer: str = Field(
        ...,
        title="AI Response",
        description="Answer generated by the RAG chatbot after retrieving relevant document chunks."
    )
    thread_id: str = Field(
        ...,
        title="Conversation Thread ID",
        description="A unique identifier for this chat thread, used for maintaining context."
    )

@router.post(
    "/ask",
    response_model=QueryResponse,
    summary="Ask a document-based question",
    description="Submit a natural language question. The system uses hybrid semantic + BM25 search from Pinecone and responds using GPT-4o.",
    response_description="The answer generated by the chatbot."
)
async def ask_question(request: QueryRequest):
    """
    Document-aware chatbot endpoint that retrieves top-matching content from your PDF documents
    and generates a natural language response using GPT-4o.
    """
    logger.info(f"[CHAT] Incoming question: {request.question}")
    
    # Check if thread_id is provided, if not, pass None to let ChatService generate one
    if request.thread_id:
        result = chat_service.ask(request.question, thread_id=request.thread_id)
    else:
        result = chat_service.ask(request.question)  # No thread_id, let ChatService handle it
    
    # Include the thread_id and answer in the response
    return QueryResponse(answer=result["answer"], thread_id=result["thread_id"])
